eval_mat = [0.8, 0.15, 0.05, 0, 0;
            0.2, 0.6, 0.1, 0.1, 0;
            0.5, 0.4, 0.1, 0, 0;
            0.1, 0.3, 0.5, 0.05, 0.05;
            0.3, 0.5, 0.13, 0.05, 0;
            0.2, 0.2, 0.4, 0.1, 0.1;
            0.4, 0.4, 0.1, 0.1, 0;
            0.1, 0.3, 0.3, 0.2, 0.1;
            0.3, 0.2, 0.2, 0.2, 0.1;
            0.1, 0.3, 0.5, 0.1, 0;
            0.2, 0.3, 0.3, 0.1, 0.1;
            0.2, 0.3, 0.35, 0.15, 0;
            0.1, 0.3, 0.4, 0.1, 0.1;
            0.1, 0.4, 0.3, 0.1, 0.1;
            0.3, 0.4, 0.2, 0.1, 0;
            0.1, 0.4, 0.3, 0.1, 0.1;
            0.2, 0.3, 0.4, 0.1, 0;
            0.4, 0.3, 0.2, 0.1, 0];

% 展示原始评价矩阵
disp('原始评价矩阵:');
disp(eval_mat);

% 获取评价矩阵的维度信息
[m, n] = size(eval_mat);

% 设定各一级指标组的起始行号位置
separation_points = [1, 5, 10, 15];

% 定义各二级指标在其所属一级指标组内的权重分配
w_mat = {[0.2, 0.3, 0.3, 0.2],
    [0.3, 0.2, 0.1, 0.2, 0.2],
    [0.1, 0.2, 0.3, 0.2, 0.2],
    [0.3, 0.2, 0.2, 0.3]};

% 设定四个一级指标在整个评价体系中的权重系数
w_vec = [0.4, 0.3, 0.2, 0.1];

% 构建多层次评价模型：计算一级评判结果
separation_points(end+1) = m + 1;
eval_mat_second = [];

% 遍历每个一级指标组进行综合计算
for i = 1:length(separation_points) - 1
    % 对每个一级指标组进行加权综合运算
    eval_mat_second = [eval_mat_second; w_mat{i} * eval_mat(separation_points(i):separation_points(i+1) - 1, :)];
end

% 输出一级指标的综合评价向量
disp('一级指标综合评价结果:');
disp(eval_mat_second);

% 进行二级综合评判：将一级评价结果再次加权
eval_vec = w_vec * eval_mat_second;

% 显示最终的综合评价向量
disp('最终综合评价向量:');
disp(eval_vec);